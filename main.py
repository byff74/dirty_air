import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types


def dt():
    now = str(datetime.now())[:10]
    timeStamp = datetime.strptime(now, "%Y-%m-%d").timestamp()
    return int(timeStamp)


def dt1():
    now = str(datetime.now())[:11] + "23:59:59"
    timeStamp = datetime.strptime(now, "%Y-%m-%d %H:%M:%S").timestamp()
    return int(timeStamp)


bot = Bot(
    token={Token},
    parse_mode=types.ParseMode.HTML,
)
dp = Dispatcher(bot)

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons = ["–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥", "–ß–ú–ó", "–¶–µ–Ω—Ç—Ä", "–ß—É—Ä–∏–ª–æ–≤–æ", "–í—Å–µ —Ä–∞–π–æ–Ω—ã"]
keyboard.add(*buttons)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        "<code>–ü—Ä–∏–≤–µ—Ç üëã\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ.\n"
        "\n–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å ‚Äì –ò–ö–í, —ç—Ç–æ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤–µ—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞.\n"
        "\n–°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è 50 –º–∫–≥/–º3.\n"
        "\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–π–æ–Ω üè°.\n</code>",
        reply_markup=keyboard,
    )


@dp.message_handler(text="–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥")
async def sz(message: types.Message):
    try:
        url = f"https://roseman.airalab.org/api/sensor/135fbacd20ff3ad0c8ebda98ca83fef6f1daa136448b1fffc1af3e2629b1a390/{dt()}/{dt1()}"
        r = requests.get(url).json()
        main = r.get("result")
        for data in main:
            pm10 = data.get("data").get("pm10")
            temp = data.get("data").get("temperature")
            time = datetime.fromtimestamp(data.get("timestamp"))
            humidity = data.get("data").get("humidity")
        if float(pm10) > 50:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥\n–ò–ö–í: {pm10} üôä\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
        else:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥\n–ò–ö–í: {pm10} ‚òò\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
    except:
        await bot.send_message(
            message.chat.id,
            f"<code>–ù–µ –º–æ–≥—É –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–∞—Ç—á–∏–∫ üò¨</code>",
            reply_markup=keyboard,
        )


@dp.message_handler(text="–ß–ú–ó")
async def chmz(message: types.Message):
    try:
        url = f"https://roseman.airalab.org/api/sensor/81c9bfbbe8c7bd0ac0670e435853a90008d84222b79c97e09d28214ae26eec03/{dt()}/{dt1()}"
        r = requests.get(url).json()
        main = r.get("result")
        for data in main:
            pm10 = data.get("data").get("pm10")
            temp = data.get("data").get("temperature")
            time = datetime.fromtimestamp(data.get("timestamp"))
            humidity = data.get("data").get("humidity")
        if float(pm10) > 50:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –ß–ú–ó\n–ò–ö–í: {pm10} üôä\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
        else:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –ß–ú–ó\n–ò–ö–í: {pm10} ‚òò\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
    except:
        await bot.send_message(
            message.chat.id,
            f"<code>–ù–µ –º–æ–≥—É –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–∞—Ç—á–∏–∫ üò¨</code>",
            reply_markup=keyboard,
        )


@dp.message_handler(text="–¶–µ–Ω—Ç—Ä")
async def centr(message: types.Message):
    try:
        url = f"https://roseman.airalab.org/api/sensor/c9a3d4bfeac495243aacc7278105501a31fc5f43f7ad6230db89f851a49eeb17/{dt()}/{dt1()}"
        r = requests.get(url).json()
        main = r.get("result")
        for data in main:
            pm10 = data.get("data").get("pm10")
            temp = data.get("data").get("temperature")
            time = datetime.fromtimestamp(data.get("timestamp"))
            humidity = data.get("data").get("humidity")
        if float(pm10) > 50:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –¶–µ–Ω—Ç—Ä\n–ò–ö–í: {pm10} üôä\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
        else:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –¶–µ–Ω—Ç—Ä\n–ò–ö–í: {pm10} ‚òò\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
    except:
        await bot.send_message(
            message.chat.id,
            f"<code>–ù–µ –º–æ–≥—É –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–∞—Ç—á–∏–∫ üò¨</code>",
            reply_markup=keyboard,
        )


@dp.message_handler(text="–ß—É—Ä–∏–ª–æ–≤–æ")
async def churilovo(message: types.Message):
    try:
        url = f"https://roseman.airalab.org/api/sensor/eca00d1f1caecfe51e5feacd76a12dfa07ebd61c91c718a69777eb973105e1f9/{dt()}/{dt1()}"
        r = requests.get(url).json()
        main = r.get("result")
        for data in main:
            pm10 = data.get("data").get("pm10")
            temp = data.get("data").get("temperature")
            time = datetime.fromtimestamp(data.get("timestamp"))
            humidity = data.get("data").get("humidity")
        if float(pm10) > 50:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –ß—É—Ä–∏–ª–æ–≤–æ\n–ò–ö–í: {pm10} üôä\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
        else:
            await bot.send_message(
                message.chat.id,
                f"<code>–î–∞—Ç–∞: {time}\n–†–∞–π–æ–Ω: –ß—É—Ä–∏–ª–æ–≤–æ\n–ò–ö–í: {pm10} ‚òò\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–°\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%</code>",
                reply_markup=keyboard,
            )
    except:
        await bot.send_message(
            message.chat.id,
            f"<code>–ù–µ –º–æ–≥—É –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –¥–∞—Ç—á–∏–∫ üò¨</code>",
            reply_markup=keyboard,
        )


@dp.message_handler(text="–í—Å–µ —Ä–∞–π–æ–Ω—ã")
async def send_welcome(message: types.Message):
    await bot.send_message(
        message.chat.id,
        "<code>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üë®‚Äçüíª</code>",
        reply_markup=keyboard,
    )


@dp.message_handler()
async def send_welcome(message: types.Message):
    await bot.send_message(
        message.chat.id,
        "<code>–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏—Ç–µ c–≤–æ–π —Ä–∞–π–æ–Ω üßê</code>",
        reply_markup=keyboard,
    )


if __name__ == "__main__":
    executor.start_polling(dp)

# def dt():
#     now = str(datetime.now())[:10]
#     timeStamp = datetime.strptime(now, "%Y-%m-%d").timestamp()
#     return int(timeStamp)

# def dt1():
#     now = str(datetime.now())[:11] + "23:59:59"
#     timeStamp = datetime.strptime(now, "%Y-%m-%d %H:%M:%S").timestamp()
#     return int(timeStamp)

# def SZ():
#     url = f'https://roseman.airalab.org/api/sensor/135fbacd20ff3ad0c8ebda98ca83fef6f1daa136448b1fffc1af3e2629b1a390/{dt()}/{dt1()}'
#     r = requests.get(url).json()
#     main = r.get('result')
#     for data in main:
#         pm10 = data.get('data').get('pm10')
#         temp = data.get('data').get('temperature')
#         time = datetime.fromtimestamp(data.get('timestamp'))
#         humidity = data.get('data').get('humidity')
#     if (float(pm10)>50):
#         print(f'{time} | –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥ | –ò–ö–í: {pm10} ‚ò† | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')
#     else:
#         print(f'{time} | –°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥ | –ò–ö–í: {pm10} ‚úî | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')

# def CHMZ():
#     url = f'https://roseman.airalab.org/api/sensor/81c9bfbbe8c7bd0ac0670e435853a90008d84222b79c97e09d28214ae26eec03/{dt()}/{dt1()}'
#     r = requests.get(url).json()
#     main = r.get('result')
#     for data in main:
#         pm10 = data.get('data').get('pm10')
#         temp = data.get('data').get('temperature')
#         time = datetime.fromtimestamp(data.get('timestamp'))
#         humidity = data.get('data').get('humidity')
#     if (float(pm10)>50):
#         print(f'{time} | –ß–ú–ó | –ò–ö–í: {pm10} ‚ò† | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')
#     else:
#         print(f'{time} | –ß–ú–ó | –ò–ö–í: {pm10} ‚úî | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')

# def centr():
#     url = f'https://roseman.airalab.org/api/sensor/c9a3d4bfeac495243aacc7278105501a31fc5f43f7ad6230db89f851a49eeb17/{dt()}/{dt1()}'
#     r = requests.get(url).json()
#     main = r.get('result')
#     for data in main:
#         pm10 = data.get('data').get('pm10')
#         temp = data.get('data').get('temperature')
#         time = datetime.fromtimestamp(data.get('timestamp'))
#         humidity = data.get('data').get('humidity')
#     if (float(pm10)>50):
#         print(f'{time} | –¶–µ–Ω—Ç—Ä | –ò–ö–í: {pm10} ‚ò† | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')
#     else:
#         print(f'{time} | –¶–µ–Ω—Ç—Ä | –ò–ö–í: {pm10} ‚úî | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')

# def churilovo():
#     url = f'https://roseman.airalab.org/api/sensor/eca00d1f1caecfe51e5feacd76a12dfa07ebd61c91c718a69777eb973105e1f9/{dt()}/{dt1()}'
#     r = requests.get(url).json()
#     main = r.get('result')
#     for data in main:
#         pm10 = data.get('data').get('pm10')
#         temp = data.get('data').get('temperature')
#         time = datetime.fromtimestamp(data.get('timestamp'))
#         humidity = data.get('data').get('humidity')
#     if (float(pm10)>50):
#         print(f'{time} | –ß—É—Ä–∏–ª–æ–≤–æ | –ò–ö–í: {pm10} ‚ò† | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')
#     else:
#         print(f'{time} | –ß—É—Ä–∏–ª–æ–≤–æ | –ò–ö–í: {pm10} ‚úî | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞–° | –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%')

# while True:
#     SZ()
#     CHMZ()
#     centr()
#     churilovo()
#     sleep(3600)
